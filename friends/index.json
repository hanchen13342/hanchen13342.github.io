[{"content":"前几天完成了hexo向hugo的迁移，记录一下过程。\n1. 原因  hugo比hexo更快，文章多后就会有差异 hugo是用go写的，正好我正准备学习go，所以就当学习  2. hexo和hugo的差异 在hugo的官网上hugo是这样介绍的\nThe world’s fastest framework for building websites\n确实是这样，hugo不管在安装和使用上都要比hexo简单一点，更容易上手，hugo与hexo类似，但比hexo更高效、简洁、扩展性强。\n在安装上 hugo只需要一个二进制文件即可，而hexo必须安装一些其他依赖。\n更多hugo信息请看hugo官网https://gohugo.io/\n3.hugo的使用 一、首先你的电脑必须安装 + Git\r+ Go(https://golang.google.cn/)\r 二、源码安装  到GitHub上下载关于自己电脑配置的版本https://github.com/gohugoio/hugo/releases，下载 在自己电脑下的创建一个bin目录任意位置解压 把带有Hugo.exe的目录添加到环境变量 使用hugo version检查安装是否成功  三、创建站点 hugo new site blog 创建一个名为blog的站点\n~/blog $ tree -L 1 . # 说明 Hexo ├── archetypes/ # 文章模板 scaffolds/ ├── assets/ # Hugo 管道 ├── config.toml # 配置文件 _config.yml ├── content/ # 文章目录 source/_posts/ ├── data/ # Hugo 数据文件 source/_data/ ├── layouts/ # 布局模板 ├── public/ # 生成的静态文件 public/ ├── resources/ # Hugo 缓存 ├── static/ # 网站的静态文件 source/ └── themes/ # 主题目录 themes/ 添加一个主题 在官方网站上有很多种主题可以选择，挑一个自己喜欢的主题\n然后把主题里的exampleSite里的文件复制在根目录\ncd blog;\\\rgit init;\\\rgit submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke;\\\r# Edit your config.toml configuration file\r# and add the Ananke theme.\recho 'theme = \u0026quot;ananke\u0026quot;' \u0026gt;\u0026gt; config.toml\r添加一篇新文章 hugo new posts/my-first-post.md\r查看运行效果 hugo server\r四、主题配置 主题配置在config下的.toml下的文件中配置，详细配置就不说了，根据自己的情况配置，更多的主题修改可在layout里修改\n五、配置GitHub Pages 这部分网上教程非常多，首先在 GitHub 上创建一个 Repository，命名为 username.github.io\n把 config.toml 的 basaeURL 修改为 https://usrname.github.io/\n然后进入你的 public 目录按照正常 Git 命令操作即可\n$ cd public\r$ git init\r$ git remote add origin https://github.com/username/username.github.io.git\r$ git add -A\r$ git commit -m \u0026quot;first commit\u0026quot;\r$ git push -u origin master\r第一次初始化时可能会叫配置用户名和密码：\ngit config --global user.name \u0026quot;xxx\u0026quot;\rgit config --global user.email \u0026quot;xxx@xxx.com\u0026quot;\r之后更新文章并生成好静态页面以后，就可以使用 Git push 来同步了\n$ cd public\r$ git add .\r$ git commit -m \u0026quot;add blog post\u0026quot;\r$ git push\r关于 Git 的使用说明，可以参考网络上的一大堆教程，这里不再重复。\n编写自动化脚本 在根目录下创建deploy.sh，输入如下：\n#!/bin/sh\r# If a command fails then the deploy stops\rset -e\rprintf \u0026quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026quot;\r# Build the project.\rhugo # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;`\r# Go To Public folder\rcd public\r# Add changes to git.\rgit add .\r# Commit changes.\rmsg=\u0026quot;rebuilding site $(date)\u0026quot;\rif [ -n \u0026quot;$*\u0026quot; ]; then\rmsg=\u0026quot;$*\u0026quot;\rfi\rgit commit -m \u0026quot;$msg\u0026quot;\r# Push source and build repos.\rgit push origin master\r此后，编写文章后，双击脚本运行自动上次到GitHub。\n","description":"","id":2,"section":"posts","tags":["Hugo"],"title":"Hexo迁移到Hugo","uri":"https://shijin.fun/posts/hexo-move-hugo/"},{"content":"什么是Docker ​\tDocker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 GitHub 上进行维护。\n​\tDocker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。\n​\tDocker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。\n​\t在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。\n为什么选择Docker?\n（1）上手快。\n​\t用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。\n 随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。\n（2）职责的逻辑分类\n​\t使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”\n（3）快速高效的开发生命周期\n​\tDocker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）\n（4）鼓励使用面向服务的架构\n​\tDocker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）\n一、更新软件 为避免安装软件时，系统的一些包或软件版本过低，我们拿到一台新服务器时会跟新一下系统软件\nUbuntu 更新软件\n  sudo apt-get update;\n  sudo apt-get upgrade\n  centos更新软件\n sudo yum update  以下在Ubuntu演示： 安装docker  sudo apt-get install docker.io 查看版本信息 docker -v  把docker添加到用户组，以便当前用户使用docker命令\n sudo usermod -aG docker $USER  重新登录\ndocker info 查看信息\n设置docker镜像仓库源 dockers默认仓库在国外，比较慢，换回国内。\nUbuntu 的是在默认路径，centos有些不是在默认路径\n sudo vi /etc/docker/daemon.json  添加信息\n{ \u0026quot;registry-mirrors\u0026quot;: [\u0026quot;https://registry.docker-cn.com\u0026quot;] } 安装docker-compose  sudo pip install docker-compose -i http://pypi.douban.com/simple \u0026ndash;trusted-host pypi.douban.com  查看版本\n docker-compose -v  官方安装文档 文档地址：  https://docs.docker.com/install/  官方 Dockerfile  nginx: https://github.com/nginxinc/docker-nginx mysql: https://github.com/docker-library/mysql python: https://github.com/docker-library/python redis: https://github.com/docker-library/redis  镜像 Tag 查询 https://registry.hub.docker.com/\n","description":"","id":3,"section":"posts","tags":["Docker"],"title":"Docker的安装","uri":"https://shijin.fun/posts/docker%E5%AE%89%E8%A3%85/"},{"content":"1.引言 平时经常处理一些Excel文件，小的文件直接用Excel处理还行，大的文件，可以试着用python来处理，相对比较方便，而且python易学，代码简单。\n2.第三方库  xlrd 读 xlwt 写  3.代码 import xlrd 读取 file = 'test3.xlsx' def read_excel(): wb = xlrd.open_workbook(filename=file)#打开文件 print(wb.sheet_names())#获取所有表格名字 sheet1 = wb.sheet_by_index(0)#通过索引获取表格 sheet2 = wb.sheet_by_name('年级')#通过名字获取表格 print(sheet1,sheet2) print(sheet1.name,sheet1.nrows,sheet1.ncols) rows = sheet1.row_values(2)#获取行内容 cols = sheet1.col_values(3)#获取列内容 print(rows) print(cols) print(sheet1.cell(1,0).value)#获取表格里的内容，三种方式 print(sheet1.cell_value(1,0)) print(sheet1.row(1)[0].value) 合并表格：\nmerged_cells()用法，merged_cells返回的这四个参数的含义是：(row,row_range,col,col_range)\nimport xlwt #设置表格样式 def set_style(name,height,bold=False): style = xlwt.XFStyle() font = xlwt.Font() font.name = name font.bold = bold font.color_index = 4 font.height = height style.font = font return style #写Excel def write_excel(): f = xlwt.Workbook() sheet1 = f.add_sheet('学生',cell_overwrite_ok=True) row0 = [\u0026quot;姓名\u0026quot;,\u0026quot;年龄\u0026quot;,\u0026quot;出生日期\u0026quot;,\u0026quot;爱好\u0026quot;] colum0 = [\u0026quot;张三\u0026quot;,\u0026quot;李四\u0026quot;,\u0026quot;恋习Python\u0026quot;,\u0026quot;小明\u0026quot;,\u0026quot;小红\u0026quot;,\u0026quot;无名\u0026quot;] #写第一行 for i in range(0,len(row0)): sheet1.write(0,i,row0[i],set_style('Times New Roman',220,True)) #写第一列 for i in range(0,len(colum0)): sheet1.write(i+1,0,colum0[i],set_style('Times New Roman',220,True)) sheet1.write(1,3,'2006/12/12') sheet1.write_merge(6,6,1,3,'未知')#合并行单元格 sheet1.write_merge(1,2,3,3,'打游戏')#合并列单元格 sheet1.write_merge(4,5,3,3,'打篮球') f.save('test.xls') 常用时间库\nimport time startime = time.strftime(\u0026quot;%Y-%m-%d %H:%M:%S\u0026quot;, time.localtime()) # 获取系统当前时间并格式化为格式 print(time.strftime(\u0026quot;%Y-%m-%d %H:%M:%S\u0026quot;, time.localtime()) + ' ***') # “实时+***” ","description":"","id":4,"section":"posts","tags":["Excel","Python"],"title":"Python简单处理excel","uri":"https://shijin.fun/posts/python-excel/"},{"content":"Markdown是一种标记语言，语法简单，易阅读易编写，可以让用户完全脱离鼠标写出样式丰富的文档，广受程序员喜爱，目前许多网站都已经支持通过Markdown语法来写文章或者发表评论。\n   元素 Markdown语法     标题 # 标题1\n## h2\n### h3   加粗 **文字加粗**   引用 \u0026gt; 引用文字   有序列表 1. 第一项\n2. 第二项\n3. 第三项   无序列表 - 第一项\n- 第二项\n- 第三项   链接 [链接](url)   图片 ![图片](image.jpg)   水平线 ---   代码 `code`   代码块 ```code snippet```    ","description":"","id":5,"section":"posts","tags":["Markdown"],"title":"Markdown的简单使用","uri":"https://shijin.fun/posts/markdown-use/"},{"content":"在国庆前一个星期，我准备自己写一个博客网站，于是在网上查了一下怎么写才好，本来想自己一步步的来，但是看了一下网上一些比较好的博客网站，发现他们都是基于某个框架搭建的，于是我也就选了hexo+github来搭建我的博客网站。\n1. 过程 网上有很多关于hexo+github的视频教程和文档教程我也就不多说了。\n附一个比较好的教程链接吧。\nHexo 搭建个人博客系列：基础建站篇\n过程困难点 我所遇到的困难呢，主要是配置ssh。由于我一开始git配置的是gitee,但是当我把git配置到GitHub上后我原来的配置就不能用了，把我折腾了半天，最后在网上找到教程终于弄好了。主要是把ssh配置两个文件，一个gitee,一个GitHub。\ngit同时绑定GitHub和gitee\n关于域名 在GitHub上搭建好博客网站后，可以自己买一个域名来代替原来的域名，而且不需要备案，在阿里云和腾讯云都可以买。域名解析很简单。网上教程很多。\n总结 国庆节忙活了好几天，终于把一个基本的博客网站个弄好了，还是有很多的不足之处，慢慢来嘛，万事开头难，现在只需要后期完善，把它弄得好看就行了。不过我也得好好学习下那些技术，才能把它完全弄明白。\n","description":"","id":6,"section":"posts","tags":["hexo","github"],"title":"Hexo+GitHub搭建博客","uri":"https://shijin.fun/posts/hexo-github/"},{"content":"资源链接\r --\r\r编程基础\n提取码：t4ig\r\r\r --\r\rPython优质书籍\n提取码：2uae\r\r\r\r\r#\n#\r\r --\r\r","description":"一些好书资源链接","id":7,"section":"","tags":null,"title":"书籍推荐","uri":"https://shijin.fun/books/"},{"content":"友情链接\r --\rSharpFactory\nSharpFactory 官网\r\r\r --\rxurenda | 朽者，然也\n一个全能大佬\r\r\r --\r陈煜峰个人博客\n一位云计算工程师\r\r\r\r","description":"云原生实验室的友情链接","id":8,"section":"","tags":null,"title":"我的朋友们","uri":"https://shijin.fun/friends/"},{"content":"一只特立独行的猴子\r笔名世今\r热爱生活\r迷恋诗和远方\r努力拼搏，坚持不懈\r极简主义者\r","description":"博主的个人简介","id":9,"section":"","tags":null,"title":"关于博主","uri":"https://shijin.fun/about/"}]